// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  userId      String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  name        String      @default("password")
  username    String      @unique
  password    String
  email       String      @unique
  bio         String?
  interests   Interests[] @relation("UserInterests")
  socials     Socials?
  matchFirst  Matches[]   @relation("firstUser")
  matchSecond Matches[]   @relation("secondUser")

  @@index([userId, username, email])
}

model Interests {
  interestId   Int    @id @default(sequence())
  interestName String @unique
  user         User[] @relation("UserInterests")

  @@index([interestId, interestName])
}

model Socials {
  userId   String  @id @unique
  linkedin String?
  github   String?
  twitter  String?
  kaggle   String?
  user     User    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model Matches {
  matchId    String      @id @default(uuid())
  matched_at DateTime    @default(now())
  useroneId  String      @default("Anonymous")
  usertwoId  String      @default("Anonymous")
  statone    Boolean
  stattwo    Boolean
  mfactor    Float
  mstatus    MatchStatus
  userone    User        @relation(fields: [useroneId], references: [userId], name: "firstUser", onDelete: SetDefault, onUpdate: Cascade)
  usertwo    User        @relation(fields: [usertwoId], references: [userId], name: "secondUser", onDelete: SetDefault, onUpdate: Cascade)

  @@unique([useroneId, usertwoId])
  @@index([useroneId, usertwoId, mstatus, matchId])
}

enum MatchStatus {
  MATCHED
  REQUESTED
  SUCCESS
  REJECTED
}
