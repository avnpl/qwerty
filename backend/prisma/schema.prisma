// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model user {
  userId      String         @id @default(uuid())
  createdAt   DateTime       @default(now())
  name        String
  username    String
  email       String
  bio         String?
  interests   userInterest[]
  socials     socials?
  matchFirst  matches[]      @relation("firstUser")
  matchSecond matches[]      @relation("secondUser")

  @@index([userId, username, email])
}

model interests {
  interestId    Int            @id @default(sequence())
  interestName  String         @unique
  userInterests userInterest[]

  @@index([interestId, interestName])
}

model userInterest {
  userId        String
  interestID    Int
  user          user      @relation(fields: [userId], references: [userId])
  userInterests interests @relation(fields: [interestID], references: [interestId])

  @@id([userId, interestID])
  @@index([userId, interestID])
}

model socials {
  userId   String  @id @unique
  linkedin String?
  github   String?
  twitter  String?
  kaggle   String?
  user     user    @relation(fields: [userId], references: [userId])

  @@index([userId])
}

model matches {
  matched_at DateTime     @default(now())
  useroneId  String
  usertwoId  String
  statone    Boolean
  stattwo    Boolean
  mfactor    Float
  mstatus    match_status
  userone    user         @relation(fields: [useroneId], references: [userId], name: "firstUser")
  usertwo    user         @relation(fields: [usertwoId], references: [userId], name: "secondUser")

  @@id([useroneId, usertwoId])
  @@unique([useroneId, usertwoId])
  @@index([useroneId, usertwoId, mstatus])
}

enum match_status {
  MATCHED
  REQUESTED
  SUCCESS
  REJECTED
}
